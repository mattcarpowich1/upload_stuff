{"version":3,"sources":["header/image/pink-baby.svg","dropzone/image/upload-cloud.svg","upload/image/check.svg","header/index.js","header/Header.js","dropzone/index.js","dropzone/Dropzone.js","progress/index.js","progress/Progress.js","upload/index.js","upload/Upload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","baby","alt","Dropzone","props","state","hover","handleDragOver","bind","handleDragLeave","handleDrop","handleOpenFileDialog","handleOnFilesAdded","e","this","stopEvent","disabled","setState","onFilesAdded","files","dataTransfer","fileListToArray","fileInputRef","click","target","preventDefault","stopPropagation","list","Array","from","onClick","onDragOver","onDragLeave","onDrop","type","multiple","ref","node","onChange","uploadCloud","Component","Progress","style","width","progress","Upload","useState","handleFilesAdded","uploading","changeUploadingStatus","uploadProgress","changeUploadProgress","successfullyUploaded","changeSuccessfullyUploaded","uploadFiles","a","promises","forEach","file","push","sendRequest","Promise","all","console","log","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","copy","name","percentage","loaded","total","response","formData","FormData","append","open","send","newFiles","map","index","key","check","opacity","renderProgress","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b949c13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pink-baby.9eb486ec.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload-cloud.214bbe1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/check.bb2ac3a2.svg\";","import Header from './Header'\n\nexport default Header","import React from 'react'\nimport baby from './image/pink-baby.svg'\nimport './Header.css'\n\nconst Header = () => (\n  <div className='header'>\n    <img src={baby} alt='baby' />\n    <h1>babydrop</h1>\n  </div>\n)\n\nexport default Header","import Dropzone from './Dropzone'\n\nexport default Dropzone\n","// basic dropzone component courtesy of https://medium.com/quick-code/how-to-create-file-dropzone-component-with-react-41e5f958d3f2\nimport React, { Component } from 'react'\nimport uploadCloud from './image/upload-cloud.svg'\nimport './Dropzone.css'\n\nclass Dropzone extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      hover: false\n    }\n\n    this.handleDragOver = this.handleDragOver.bind(this)\n    this.handleDragLeave = this.handleDragLeave.bind(this)\n    this.handleDrop = this.handleDrop.bind(this)\n    this.handleOpenFileDialog = this.handleOpenFileDialog.bind(this)\n    this.handleOnFilesAdded = this.handleOnFilesAdded.bind(this)\n  }\n\n  handleDragOver (e) {\n    this.stopEvent(e)\n    const { disabled } = this.props\n    if (!disabled) {\n      this.setState({\n        hover: true\n      })\n    }\n  }\n\n  handleDragLeave (e) {\n    this.stopEvent(e)\n    this.setState({\n      hover: false\n    })\n  }\n\n  handleDrop (e) {\n    this.stopEvent(e)\n\n    const { disabled } = this.props\n    if (!disabled) {\n      const { onFilesAdded } = this.props\n      const { files } = e.dataTransfer\n      onFilesAdded(this.fileListToArray(files))\n      this.setState({\n        hover: false\n      })\n    }\n  }\n\n  handleOpenFileDialog () {\n    this.fileInputRef.click()\n  }\n\n  handleOnFilesAdded (e) {\n    const { files } = e.target\n    const { onFilesAdded } = this.props\n    onFilesAdded(this.fileListToArray(files))\n  }\n\n  stopEvent (e) {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  fileListToArray (list) {\n    return Array.from(list)\n  }\n\n  render () {\n    const { hover } = this.state\n    const { disabled } = this.props\n    const {\n      handleOpenFileDialog,\n      handleOnFilesAdded,\n      handleDragOver,\n      handleDragLeave,\n      handleDrop\n    } = this\n    return (\n      <div\n        className={`drop-zone-container ${hover && 'hover'}`}\n        onClick={handleOpenFileDialog}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n      >\n        <input\n          type='file'\n          multiple\n          ref={node => { this.fileInputRef = node }}\n          onChange={handleOnFilesAdded}\n        />\n        <div className='drag-files'>\n          <img src={uploadCloud} alt='upload' />\n          <h3>\n            Drag files to upload\n          </h3>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Dropzone\n","import Progress from './Progress'\n\nexport default Progress\n","import React from 'react'\nimport './Progress.css'\n\nconst Progress = (props) => {\n  return (\n    <div className='progress-bar'>\n      <div\n        className='progress'\n        style={{ width: `${props.progress}%` }}\n      />\n    </div>\n  )\n}\n\nexport default Progress\n","import Upload from './Upload'\n\nexport default Upload\n","import React, { useState } from 'react'\nimport Dropzone from '../dropzone'\nimport Progress from '../progress'\nimport check from './image/check.svg'\nimport './Upload.css'\n\nconst Upload = () => {\n  const [files, handleFilesAdded] = useState([])\n  const [uploading, changeUploadingStatus] = useState(false)\n  const [uploadProgress, changeUploadProgress] = useState({})\n  const [successfullyUploaded, changeSuccessfullyUploaded] = useState(false)\n\n  const uploadFiles = async () => {\n    changeUploadProgress({})\n    changeUploadingStatus(true)\n    const promises = []\n    files.forEach(file => {\n      promises.push(sendRequest(file))\n    })\n    try {\n      await Promise.all(promises)\n\n      changeSuccessfullyUploaded(true)\n      changeUploadingStatus(false)\n    } catch (e) {\n      changeSuccessfullyUploaded(false)\n      changeUploadingStatus(false)\n      console.log('ERROR: ', e)\n    }\n  }\n\n  const sendRequest = file => {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest()\n\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          const copy = uploadProgress\n          copy[file.name] = {\n            state: 'pending',\n            percentage: (event.loaded / event.total) * 100\n          }\n          changeUploadProgress(copy)\n        }\n      })\n\n      req.upload.addEventListener('load', event => {\n        const copy = uploadProgress\n        copy[file.name] = {\n          state: 'done',\n          percentage: 100\n        }\n        changeUploadProgress(copy)\n        resolve(req.response)\n      })\n\n      req.upload.addEventListener('error', event => {\n        const copy = uploadProgress\n        copy[file.name] = {\n          state: 'error',\n          percentage: 0\n        }\n        changeUploadProgress(copy)\n        reject(req.response)\n      })\n\n      const formData = new FormData()\n      formData.append('file', file, file.name)\n\n      req.open('POST', '/upload')\n      req.send(formData)\n    })\n  }\n\n  const renderProgress = file => {\n    const progress = uploadProgress[file.name]\n    if (uploading || successfullyUploaded) {\n      return (\n        <div className='progress-wrapper'>\n          <Progress\n            progress={\n              progress\n                ? progress.percentage\n                : 0\n            }\n          />\n          <img\n            className='check-icon'\n            alt='done'\n            src={check}\n            style={{\n              opacity: progress && progress.state === 'done'\n                ? 1\n                : 0\n            }}\n          />\n        </div>\n      )\n    }\n  }\n\n  const renderActions = () => (\n    successfullyUploaded\n      ? (\n        <button\n          onClick={() => {\n            handleFilesAdded([])\n            changeSuccessfullyUploaded(false)\n          }}\n        >\n          Clear\n        </button>\n      ) : (\n        <button\n          disabled={files.length <= 0 || uploading}\n          onClick={uploadFiles}\n        >\n          Upload\n        </button>\n      )\n  )\n\n  return (\n    <div className='upload'>\n      <span className='title'>Upload Files</span>\n      <div className='content'>\n        <div>\n          <Dropzone\n            onFilesAdded={newFiles => handleFilesAdded([...files, ...newFiles])}\n            disabled={uploading || successfullyUploaded}\n          />\n        </div>\n        <div className='files'>\n          {\n            files.map((file, index) => (\n              <div key={`${file.name}_${index}`} className='row'>\n                <span className='filename'>{file.name}</span>\n                {renderProgress(file)}\n              </div>\n            ))\n          }\n        </div>\n      </div>\n      <div className='actions'>\n        {renderActions()}\n      </div>\n    </div>\n  )\n}\n\nexport default Upload\n","import React from 'react'\nimport Header from './header'\nimport './App.css'\nimport Upload from './upload'\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Header />\n      <div className='main'>\n        <div className='card'>\n          <Upload />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}